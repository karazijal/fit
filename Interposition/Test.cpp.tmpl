{% import 'Interposition/macros.tmpl' as macros -%}
//
//  Test.cpp
//  LibraryFaultInjection
//
//  Created by Laurynas Karazija on 04/01/2016.
//  Copyright (C) 2016 Laurynas Karazija. All rights reserved.
//
//
//  This file is automatically generated
//

#include <assert.h>	//Conditionally compiled macro that compares its argument to zero
#include <complex.h> //(since C99)	Complex number arithmetic
#include <ctype.h>	//Functions to determine the type contained in character data
#include <errno.h>	//Macros reporting error conditions
#include <fenv.h> //(since C99)	Floating-point environment
#include <float.h>	//Limits of float types
#include <inttypes.h> //(since C99)	Format conversion of integer types
#include <iso646.h> //(since C95)	Alternative operator spellings
#include <limits.h>	//Sizes of basic types
#include <locale.h>	//Localization utilities
#include <math.h>	//Common mathematics functions
#include <setjmp.h>	//Nonlocal jumps
#include <signal.h>	//Signal handling
#include <stdalign.h> //(since C11)	alignas and alignof convenience macros
#include <stdarg.h>	//Variable arguments
//#include <stdatomic.h> //(since C11)	Atomic types
#include <stdbool.h> //(since C99)	Boolean type
#include <stddef.h>	//Common macro definitions
#include <stdint.h> //(since C99)	Fixed-width integer types
#include <stdio.h>	//Input/output
#include <stdlib.h>	//General utilities: memory management, program utilities, string conversions, random numbers
#include <stdnoreturn.h> //(since C11)	noreturn convenience macros
#include <string.h>	//String handling
#include <tgmath.h> //(since C99)	Type-generic math (macros wrapping math.h and complex.h)
//#include <threads.h> //(since C11)	Thread library
#include <time.h>	//Time/date utilities
#ifndef __APPLE__
#include <uchar.h> //(since C11)	UTF-16 and UTF-32 character utilities
#endif

#include <wchar.h> //(since C95)	Extended multibyte and wide character utilities
#include <wctype.h> //(since C95)	Wide character classification and mapping utilities
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/socket.h>
#include <unistd.h>
#include <fcntl.h>

{% for func in fn_list if 'nogen' not in func.flags and 'shorted' not in func.flags and 'vararg' not in func.flags and 'errinj' in func.flags -%}
{% if 'SKIP' not in func.test_call_args -%}
    bool {{func.name}}_test(){
        errno = 0;
        {{func.ret}} rtn = {{func.name}}({% for arg in func.test_call_args %} {{arg}} {% if not loop.last %},{%endif%}{%endfor %} );
        fwrite(&rtn, sizeof({{func.ret}}), 1, stdout);
        if ( {{func.err_ret}} == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for {{func.name}}: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
{%- endif %}
{% endfor %}

int main(){
    char buf[] = "Beggining Test run\n";
    int size = sizeof(buf);
    fwrite(buf, sizeof(char), size, stdout);
    if(
       {% for func in fn_list if 'nogen' not in func.flags and 'shorted' not in func.flags and 'vararg' not in func.flags and 'errinj' in func.flags -%}
            {% if 'SKIP' not in func.test_call_args  -%}
            {{func.name}}_test() {%- if not loop.last %} && {% endif %}
            {%- endif %}
       {% endfor %}
     ) {
        return 0;
     } else return 1;
}