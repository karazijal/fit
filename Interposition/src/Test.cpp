//
//  Test.cpp
//  LibraryFaultInjection
//
//  Created by Laurynas Karazija on 04/01/2016.
//  Copyright (C) 2016 Laurynas Karazija. All rights reserved.
//
//
//  This file is automatically generated
//

#include <assert.h>	//Conditionally compiled macro that compares its argument to zero
#include <complex.h> //(since C99)	Complex number arithmetic
#include <ctype.h>	//Functions to determine the type contained in character data
#include <errno.h>	//Macros reporting error conditions
#include <fenv.h> //(since C99)	Floating-point environment
#include <float.h>	//Limits of float types
#include <inttypes.h> //(since C99)	Format conversion of integer types
#include <iso646.h> //(since C95)	Alternative operator spellings
#include <limits.h>	//Sizes of basic types
#include <locale.h>	//Localization utilities
#include <math.h>	//Common mathematics functions
#include <setjmp.h>	//Nonlocal jumps
#include <signal.h>	//Signal handling
#include <stdalign.h> //(since C11)	alignas and alignof convenience macros
#include <stdarg.h>	//Variable arguments
//#include <stdatomic.h> //(since C11)	Atomic types
#include <stdbool.h> //(since C99)	Boolean type
#include <stddef.h>	//Common macro definitions
#include <stdint.h> //(since C99)	Fixed-width integer types
#include <stdio.h>	//Input/output
#include <stdlib.h>	//General utilities: memory management, program utilities, string conversions, random numbers
#include <stdnoreturn.h> //(since C11)	noreturn convenience macros
#include <string.h>	//String handling
#include <tgmath.h> //(since C99)	Type-generic math (macros wrapping math.h and complex.h)
//#include <threads.h> //(since C11)	Thread library
#include <time.h>	//Time/date utilities
#ifndef __APPLE__
#include <uchar.h> //(since C11)	UTF-16 and UTF-32 character utilities
#endif

#include <wchar.h> //(since C95)	Extended multibyte and wide character utilities
#include <wctype.h> //(since C95)	Wide character classification and mapping utilities
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/socket.h>
#include <unistd.h>
#include <fcntl.h>

bool fgetc_unlocked_test(){
        errno = 0;
        int rtn = fgetc_unlocked( NULL  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for fgetc_unlocked: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool fputc_unlocked_test(){
        errno = 0;
        int rtn = fputc_unlocked( 4 , NULL  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for fputc_unlocked: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool close_test(){
        errno = 0;
        int rtn = close( 4  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for close: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool creat_test(){
        errno = 0;
        int rtn = creat( NULL , 4  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for creat: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool creat64_test(){
        errno = 0;
        int rtn = creat64( NULL , 4  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for creat64: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool fclose_test(){
        errno = 0;
        int rtn = fclose( NULL  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( EOF == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for fclose: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool fcloseall_test(){
        errno = 0;
        int rtn = fcloseall( );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for fcloseall: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool fgetc_test(){
        errno = 0;
        int rtn = fgetc( NULL  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for fgetc: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool fgets_test(){
        errno = 0;
        char * rtn = fgets( NULL , 4 , NULL  );
        fwrite(&rtn, sizeof(char *), 1, stdout);
        if ( NULL == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for fgets: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool fopen_test(){
        errno = 0;
        FILE * rtn = fopen( NULL , NULL  );
        fwrite(&rtn, sizeof(FILE *), 1, stdout);
        if ( NULL == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for fopen: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool fopen64_test(){
        errno = 0;
        FILE * rtn = fopen64( NULL , NULL  );
        fwrite(&rtn, sizeof(FILE *), 1, stdout);
        if ( NULL == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for fopen64: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool fputc_test(){
        errno = 0;
        int rtn = fputc( 4 , NULL  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( EOF == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for fputc: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool fputs_test(){
        errno = 0;
        int rtn = fputs( NULL , NULL  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( EOF == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for fputs: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool freopen_test(){
        errno = 0;
        FILE * rtn = freopen( NULL , NULL , NULL  );
        fwrite(&rtn, sizeof(FILE *), 1, stdout);
        if ( NULL == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for freopen: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool freopen64_test(){
        errno = 0;
        FILE * rtn = freopen64( NULL , NULL , NULL  );
        fwrite(&rtn, sizeof(FILE *), 1, stdout);
        if ( NULL == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for freopen64: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool getline_test(){
        errno = 0;
        __ssize_t rtn = getline( NULL , NULL , NULL  );
        fwrite(&rtn, sizeof(__ssize_t), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for getline: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool fgets_unlocked_test(){
        errno = 0;
        char * rtn = fgets_unlocked( NULL , 4 , NULL  );
        fwrite(&rtn, sizeof(char *), 1, stdout);
        if ( NULL == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for fgets_unlocked: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool fputs_unlocked_test(){
        errno = 0;
        int rtn = fputs_unlocked( NULL , NULL  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( EOF == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for fputs_unlocked: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool fseek_test(){
        errno = 0;
        int rtn = fseek( NULL , 4 , 4  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for fseek: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool fseeko_test(){
        errno = 0;
        int rtn = fseeko( NULL , 4 , 4  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for fseeko: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool fsetpos_test(){
        errno = 0;
        int rtn = fsetpos( NULL , NULL  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for fsetpos: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool fsetpos64_test(){
        errno = 0;
        int rtn = fsetpos64( NULL , NULL  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for fsetpos64: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool lseek_test(){
        errno = 0;
        off_t rtn = lseek( 4 , 4 , 4  );
        fwrite(&rtn, sizeof(off_t), 1, stdout);
        if ( (off_t) -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for lseek: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool lseek64_test(){
        errno = 0;
        off64_t rtn = lseek64( 4 , 4 , 4  );
        fwrite(&rtn, sizeof(off64_t), 1, stdout);
        if ( (off_t) -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for lseek64: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool chmod_test(){
        errno = 0;
        int rtn = chmod( NULL , 4  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for chmod: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool chown_test(){
        errno = 0;
        int rtn = chown( NULL , 4 , 4  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for chown: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool fchmod_test(){
        errno = 0;
        int rtn = fchmod( 4 , 4  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for fchmod: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool fchown_test(){
        errno = 0;
        int rtn = fchown( 4 , 4 , 4  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for fchown: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool lchown_test(){
        errno = 0;
        int rtn = lchown( NULL , 4 , 4  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for lchown: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool dup_test(){
        errno = 0;
        int rtn = dup( 4  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for dup: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool dup2_test(){
        errno = 0;
        int rtn = dup2( 4 , 4  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for dup2: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool dup3_test(){
        errno = 0;
        int rtn = dup3( 4 , 4 , 4  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for dup3: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool ftruncate_test(){
        errno = 0;
        int rtn = ftruncate( 4 , 4  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for ftruncate: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool ftruncate64_test(){
        errno = 0;
        int rtn = ftruncate64( 4 , 4  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for ftruncate64: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool link_test(){
        errno = 0;
        int rtn = link( NULL , NULL  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for link: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool mkdir_test(){
        errno = 0;
        int rtn = mkdir( NULL , 4  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for mkdir: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool mkfifo_test(){
        errno = 0;
        int rtn = mkfifo( NULL , 4  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for mkfifo: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }

bool remove_test(){
        errno = 0;
        int rtn = remove( NULL  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for remove: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool rename_test(){
        errno = 0;
        int rtn = rename( NULL , NULL  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for rename: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool rmdir_test(){
        errno = 0;
        int rtn = rmdir( NULL  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for rmdir: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool symlink_test(){
        errno = 0;
        int rtn = symlink( NULL , NULL  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for symlink: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool truncate_test(){
        errno = 0;
        int rtn = truncate( NULL , 4  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for truncate: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool truncate64_test(){
        errno = 0;
        int rtn = truncate64( NULL , 4  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for truncate64: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool unlink_test(){
        errno = 0;
        int rtn = unlink( NULL  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for unlink: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool popen_test(){
        errno = 0;
        FILE * rtn = popen( NULL , NULL  );
        fwrite(&rtn, sizeof(FILE *), 1, stdout);
        if ( NULL == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for popen: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool pclose_test(){
        errno = 0;
        int rtn = pclose( NULL  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for pclose: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool mkstemp_test(){
        errno = 0;
        int rtn = mkstemp( NULL  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for mkstemp: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool mkostemp_test(){
        errno = 0;
        int rtn = mkostemp( NULL , 4  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for mkostemp: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool mkstemps_test(){
        errno = 0;
        int rtn = mkstemps( NULL , 4  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for mkstemps: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool mkostemps_test(){
        errno = 0;
        int rtn = mkostemps( NULL , 4 , 4  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for mkostemps: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool tmpfile_test(){
        errno = 0;
        FILE * rtn = tmpfile( );
        fwrite(&rtn, sizeof(FILE *), 1, stdout);
        if ( NULL == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for tmpfile: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool tmpfile64_test(){
        errno = 0;
        FILE * rtn = tmpfile64( );
        fwrite(&rtn, sizeof(FILE *), 1, stdout);
        if ( NULL == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for tmpfile64: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }






bool chdir_test(){
        errno = 0;
        int rtn = chdir( NULL  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for chdir: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool fchdir_test(){
        errno = 0;
        int rtn = fchdir( 4  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for fchdir: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool killpg_test(){
        errno = 0;
        int rtn = killpg( 4 , 4  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for killpg: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool seteuid_test(){
        errno = 0;
        int rtn = seteuid( 4  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for seteuid: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool setegid_test(){
        errno = 0;
        int rtn = setegid( 4  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for setegid: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool setgid_test(){
        errno = 0;
        int rtn = setgid( 4  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for setgid: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool setreuid_test(){
        errno = 0;
        int rtn = setreuid( 4 , 4  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for setreuid: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool setregid_test(){
        errno = 0;
        int rtn = setregid( 4 , 4  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for setregid: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool setuid_test(){
        errno = 0;
        int rtn = setuid( 4  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for setuid: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool clearenv_test(){
        errno = 0;
        int rtn = clearenv( );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for clearenv: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool putenv_test(){
        errno = 0;
        int rtn = putenv( NULL  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for putenv: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool setenv_test(){
        errno = 0;
        int rtn = setenv( NULL , NULL , 4  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for setenv: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool unsetenv_test(){
        errno = 0;
        int rtn = unsetenv( NULL  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for unsetenv: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }


bool socket_test(){
        errno = 0;
        int rtn = socket( 4 , 4 , 4  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for socket: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool accept_test(){
        errno = 0;
        int rtn = accept( 4 , NULL , NULL  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for accept: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool pipe_test(){
        errno = 0;
        int rtn = pipe( NULL  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for pipe: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool pipe2_test(){
        errno = 0;
        int rtn = pipe2( NULL , 4  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for pipe2: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }






bool renameat_test(){
        errno = 0;
        int rtn = renameat( 4 , NULL , 4 , NULL  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for renameat: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool mkfifoat_test(){
        errno = 0;
        int rtn = mkfifoat( 4 , NULL , 4  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for mkfifoat: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool symlinkat_test(){
        errno = 0;
        int rtn = symlinkat( NULL , 4 , NULL  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for symlinkat: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool mkdirat_test(){
        errno = 0;
        int rtn = mkdirat( 4 , NULL , 4  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for mkdirat: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool unlinkat_test(){
        errno = 0;
        int rtn = unlinkat( 4 , NULL , 4  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for unlinkat: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool fchmodat_test(){
        errno = 0;
        int rtn = fchmodat( 4 , NULL , 4 , 4  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for fchmodat: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool fchownat_test(){
        errno = 0;
        int rtn = fchownat( 4 , NULL , 4 , 4 , 4  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for fchownat: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }
bool linkat_test(){
        errno = 0;
        int rtn = linkat( 4 , NULL , 4 , NULL , 4  );
        fwrite(&rtn, sizeof(int), 1, stdout);
        if ( -1 == rtn)
        {

            if (errno != 0){
                char buf[] = "The test is for linkat: SUCCESS\n";
                int size = sizeof(buf);
                fwrite(buf, sizeof(char), size, stdout);
                return true;
            }
        }
        return false;
    }


int main(){
    char buf[] = "Beggining Test run\n";
    int size = sizeof(buf);
    fwrite(buf, sizeof(char), size, stdout);
    if(
       fgetc_unlocked_test() && 
       fputc_unlocked_test() && 
       close_test() && 
       creat_test() && 
       creat64_test() && 
       fclose_test() && 
       fcloseall_test() && 
       fgetc_test() && 
       fgets_test() && 
       fopen_test() && 
       fopen64_test() && 
       fputc_test() && 
       fputs_test() && 
       freopen_test() && 
       freopen64_test() && 
       getline_test() && 
       fgets_unlocked_test() && 
       fputs_unlocked_test() && 
       fseek_test() && 
       fseeko_test() && 
       fsetpos_test() && 
       fsetpos64_test() && 
       lseek_test() && 
       lseek64_test() && 
       chmod_test() && 
       chown_test() && 
       fchmod_test() && 
       fchown_test() && 
       lchown_test() && 
       dup_test() && 
       dup2_test() && 
       dup3_test() && 
       ftruncate_test() && 
       ftruncate64_test() && 
       link_test() && 
       mkdir_test() && 
       mkfifo_test() && 
       
       remove_test() && 
       rename_test() && 
       rmdir_test() && 
       symlink_test() && 
       truncate_test() && 
       truncate64_test() && 
       unlink_test() && 
       popen_test() && 
       pclose_test() && 
       mkstemp_test() && 
       mkostemp_test() && 
       mkstemps_test() && 
       mkostemps_test() && 
       tmpfile_test() && 
       tmpfile64_test() && 
       
       
       
       
       
       
       chdir_test() && 
       fchdir_test() && 
       killpg_test() && 
       seteuid_test() && 
       setegid_test() && 
       setgid_test() && 
       setreuid_test() && 
       setregid_test() && 
       setuid_test() && 
       clearenv_test() && 
       putenv_test() && 
       setenv_test() && 
       unsetenv_test() && 
       
       
       socket_test() && 
       accept_test() && 
       pipe_test() && 
       pipe2_test() && 
       
       
       
       
       
       
       renameat_test() && 
       mkfifoat_test() && 
       symlinkat_test() && 
       mkdirat_test() && 
       unlinkat_test() && 
       fchmodat_test() && 
       fchownat_test() && 
       linkat_test()
       
     ) {
        return 0;
     } else return 1;
}