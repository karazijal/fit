//
//  Orig.cpp
//  LibraryFaultInjection
//
//  Created by Laurynas Karazija on 01/01/2016.
//  Copyright (C) 2016 Laurynas Karazija. All rights reserved.
//
//
//  This file is automatically generated
//


//Macros
#define ENVREADTEST "FIT_ENV_READ_TEST"
#define INJECTIONMODE "FIT_INJECTION_MODE"
#define CONTROL_FILE "FIT_CONTROL_FILE"


#include <stdlib.h>
#include <string.h>
#include <dlfcn.h>
#include <new>
#include <mutex>
#include <utime.h>
#include "Orig.hpp"


namespace FIT{
    Orig Original;
    bool initialised_flag(false);
    bool insideFIT(false);
}

size_t stringlen(const char* ptr){
    return strlen(ptr);
}

int rnd(){
    //indirect for rand() function
    return rand();
}

static bool mapFunctions(){
    FIT::Original.vfprintf_ = (int (*)(FILE * stream, const char * format, va_list ap)) dlsym(RTLD_NEXT, "vfprintf");
    FIT::Original.vdprintf_ = (int (*)(int fd, const char * format, va_list ap)) dlsym(RTLD_NEXT, "vdprintf");
    FIT::Original.fgetc_unlocked_ = (int (*)(FILE * stream)) dlsym(RTLD_NEXT, "fgetc_unlocked");
    FIT::Original.fputc_unlocked_ = (int (*)(int c, FILE * stream)) dlsym(RTLD_NEXT, "fputc_unlocked");
    FIT::Original.__vfprintf_chk_ = (int (*)(FILE * stream, int flag, const char * format, va_list ap)) dlsym(RTLD_NEXT, "__vfprintf_chk");
    FIT::Original.close_ = (int (*)(int fd)) dlsym(RTLD_NEXT, "close");
    FIT::Original.creat_ = (int (*)(const char * pathname, mode_t mode)) dlsym(RTLD_NEXT, "creat");
    FIT::Original.creat64_ = (int (*)(const char * pathname, mode_t mode)) dlsym(RTLD_NEXT, "creat64");
    FIT::Original.fclose_ = (int (*)(FILE * fp)) dlsym(RTLD_NEXT, "fclose");
    FIT::Original.fcloseall_ = (int (*)()) dlsym(RTLD_NEXT, "fcloseall");
    FIT::Original.fgetc_ = (int (*)(FILE * stream)) dlsym(RTLD_NEXT, "fgetc");
    FIT::Original.fgets_ = (char * (*)(char * s, int size, FILE * stream)) dlsym(RTLD_NEXT, "fgets");
    FIT::Original.fopen_ = (FILE * (*)(const char * path, const char * mode)) dlsym(RTLD_NEXT, "fopen");
    FIT::Original.fopen64_ = (FILE * (*)(const char * path, const char * mode)) dlsym(RTLD_NEXT, "fopen64");
    FIT::Original.fputc_ = (int (*)(int c, FILE * stream)) dlsym(RTLD_NEXT, "fputc");
    FIT::Original.fputs_ = (int (*)(const char * s, FILE * stream)) dlsym(RTLD_NEXT, "fputs");
    FIT::Original.fread_ = (size_t (*)(void * ptr, size_t size, size_t nb, FILE * stream)) dlsym(RTLD_NEXT, "fread");
    FIT::Original.freopen_ = (FILE * (*)(const char * path, const char * mode, FILE * stream)) dlsym(RTLD_NEXT, "freopen");
    FIT::Original.freopen64_ = (FILE * (*)(const char * filename, const char * type, FILE * stream)) dlsym(RTLD_NEXT, "freopen64");
    FIT::Original.fwrite_ = (size_t (*)(const void * ptr, size_t size, size_t nb, FILE * stream)) dlsym(RTLD_NEXT, "fwrite");
    FIT::Original.getline_ = (__ssize_t (*)(char ** lineptr, size_t * n, FILE * stream)) dlsym(RTLD_NEXT, "getline");
    FIT::Original.pread_ = (ssize_t (*)(int fd, void * ptr, size_t nb, off_t offset)) dlsym(RTLD_NEXT, "pread");
    FIT::Original.pwrite_ = (ssize_t (*)(int fd, const void * ptr, size_t nb, off_t offset)) dlsym(RTLD_NEXT, "pwrite");
    FIT::Original.read_ = (ssize_t (*)(int fd, void * ptr, size_t nb)) dlsym(RTLD_NEXT, "read");
    FIT::Original.vfscanf_ = (int (*)(FILE * stream, const char * format, va_list ap)) dlsym(RTLD_NEXT, "vfscanf");
    FIT::Original.write_ = (ssize_t (*)(int fd, const void * ptr, size_t nb)) dlsym(RTLD_NEXT, "write");
    FIT::Original.fread_unlocked_ = (size_t (*)(void * ptr, size_t size, size_t nb, FILE * stream)) dlsym(RTLD_NEXT, "fread_unlocked");
    FIT::Original.fwrite_unlocked_ = (size_t (*)(const void * ptr, size_t size, size_t nb, FILE * stream)) dlsym(RTLD_NEXT, "fwrite_unlocked");
    FIT::Original.fgets_unlocked_ = (char * (*)(char * s, int n, FILE * stream)) dlsym(RTLD_NEXT, "fgets_unlocked");
    FIT::Original.fputs_unlocked_ = (int (*)(const char * s, FILE * stream)) dlsym(RTLD_NEXT, "fputs_unlocked");
    FIT::Original.fseek_ = (int (*)(FILE * stream, long offset, int whence)) dlsym(RTLD_NEXT, "fseek");
    FIT::Original.fseeko_ = (int (*)(FILE * stream, off_t offset, int whence)) dlsym(RTLD_NEXT, "fseeko");
    FIT::Original.fsetpos_ = (int (*)(FILE * stream, const fpos_t * pos)) dlsym(RTLD_NEXT, "fsetpos");
    FIT::Original.fsetpos64_ = (int (*)(FILE * stream, const fpos64_t * pos)) dlsym(RTLD_NEXT, "fsetpos64");
    FIT::Original.lseek_ = (off_t (*)(int fd, off_t offset, int whence)) dlsym(RTLD_NEXT, "lseek");
    FIT::Original.lseek64_ = (off64_t (*)(int fd, off64_t offset, int whence)) dlsym(RTLD_NEXT, "lseek64");
    FIT::Original.chmod_ = (int (*)(const char * path, mode_t mode)) dlsym(RTLD_NEXT, "chmod");
    FIT::Original.chown_ = (int (*)(const char * path, uid_t owner, gid_t group)) dlsym(RTLD_NEXT, "chown");
    FIT::Original.fchmod_ = (int (*)(int fd, mode_t mode)) dlsym(RTLD_NEXT, "fchmod");
    FIT::Original.fchown_ = (int (*)(int fd, uid_t owner, gid_t group)) dlsym(RTLD_NEXT, "fchown");
    FIT::Original.lchown_ = (int (*)(const char * path, uid_t owner, gid_t group)) dlsym(RTLD_NEXT, "lchown");
    FIT::Original.dup_ = (int (*)(int oldfd)) dlsym(RTLD_NEXT, "dup");
    FIT::Original.dup2_ = (int (*)(int oldfd, int newfd)) dlsym(RTLD_NEXT, "dup2");
    FIT::Original.dup3_ = (int (*)(int oldfd, int newfd, int flags)) dlsym(RTLD_NEXT, "dup3");
    FIT::Original.ftruncate_ = (int (*)(int fd, off_t length)) dlsym(RTLD_NEXT, "ftruncate");
    FIT::Original.ftruncate64_ = (int (*)(int fd, off64_t length)) dlsym(RTLD_NEXT, "ftruncate64");
    FIT::Original.link_ = (int (*)(const char * path1, const char * path2)) dlsym(RTLD_NEXT, "link");
    FIT::Original.mkdir_ = (int (*)(const char * pathname, mode_t mode)) dlsym(RTLD_NEXT, "mkdir");
    FIT::Original.mkfifo_ = (int (*)(const char * pathname, mode_t mode)) dlsym(RTLD_NEXT, "mkfifo");
    FIT::Original.__xmknod_ = (int (*)(int __ver, const char * pathname, mode_t mode, dev_t* dev)) dlsym(RTLD_NEXT, "__xmknod");
    FIT::Original.remove_ = (int (*)(const char * pathname)) dlsym(RTLD_NEXT, "remove");
    FIT::Original.rename_ = (int (*)(const char * oldpath, const char * newpath)) dlsym(RTLD_NEXT, "rename");
    FIT::Original.rmdir_ = (int (*)(const char * pathname)) dlsym(RTLD_NEXT, "rmdir");
    FIT::Original.symlink_ = (int (*)(const char * oldpath, const char * newpath)) dlsym(RTLD_NEXT, "symlink");
    FIT::Original.truncate_ = (int (*)(const char * path, off_t length)) dlsym(RTLD_NEXT, "truncate");
    FIT::Original.truncate64_ = (int (*)(const char * path, off64_t length)) dlsym(RTLD_NEXT, "truncate64");
    FIT::Original.unlink_ = (int (*)(const char * pathname)) dlsym(RTLD_NEXT, "unlink");
    FIT::Original.popen_ = (FILE * (*)(const char * command, const char * type)) dlsym(RTLD_NEXT, "popen");
    FIT::Original.pclose_ = (int (*)(FILE * stream)) dlsym(RTLD_NEXT, "pclose");
    FIT::Original.mkstemp_ = (int (*)(char * templ)) dlsym(RTLD_NEXT, "mkstemp");
    FIT::Original.mkostemp_ = (int (*)(char * templ, int flags)) dlsym(RTLD_NEXT, "mkostemp");
    FIT::Original.mkstemps_ = (int (*)(char * templ, int suffixlen)) dlsym(RTLD_NEXT, "mkstemps");
    FIT::Original.mkostemps_ = (int (*)(char * templ, int suffixlen, int flags)) dlsym(RTLD_NEXT, "mkostemps");
    FIT::Original.tmpfile_ = (FILE * (*)()) dlsym(RTLD_NEXT, "tmpfile");
    FIT::Original.tmpfile64_ = (FILE * (*)()) dlsym(RTLD_NEXT, "tmpfile64");
    FIT::Original.__fxstat_ = (int (*)(int __ver, int fd, struct stat * buf)) dlsym(RTLD_NEXT, "__fxstat");
    FIT::Original.__fxstat64_ = (int (*)(int __ver, int fd, struct stat64 * buf)) dlsym(RTLD_NEXT, "__fxstat64");
    FIT::Original.__lxstat_ = (int (*)(int __ver, const char * path, struct stat * buf)) dlsym(RTLD_NEXT, "__lxstat");
    FIT::Original.__lxstat64_ = (int (*)(int __ver, const char * path, struct stat64 * buf)) dlsym(RTLD_NEXT, "__lxstat64");
    FIT::Original.__xstat_ = (int (*)(int __ver, const char * path, struct stat * buf)) dlsym(RTLD_NEXT, "__xstat");
    FIT::Original.__xstat64_ = (int (*)(int __ver, const char * path, struct stat64 * buf)) dlsym(RTLD_NEXT, "__xstat64");
    FIT::Original.chdir_ = (int (*)(const char * path)) dlsym(RTLD_NEXT, "chdir");
    FIT::Original.fchdir_ = (int (*)(int fd)) dlsym(RTLD_NEXT, "fchdir");
    FIT::Original.killpg_ = (int (*)(int pgrp, int sig)) dlsym(RTLD_NEXT, "killpg");
    FIT::Original.seteuid_ = (int (*)(uid_t euid)) dlsym(RTLD_NEXT, "seteuid");
    FIT::Original.setegid_ = (int (*)(gid_t egid)) dlsym(RTLD_NEXT, "setegid");
    FIT::Original.setgid_ = (int (*)(gid_t gid)) dlsym(RTLD_NEXT, "setgid");
    FIT::Original.setreuid_ = (int (*)(uid_t ruid, uid_t euid)) dlsym(RTLD_NEXT, "setreuid");
    FIT::Original.setregid_ = (int (*)(gid_t rgid, gid_t egid)) dlsym(RTLD_NEXT, "setregid");
    FIT::Original.setuid_ = (int (*)(uid_t uid)) dlsym(RTLD_NEXT, "setuid");
    FIT::Original.clearenv_ = (int (*)()) dlsym(RTLD_NEXT, "clearenv");
    FIT::Original.putenv_ = (int (*)(char * string)) dlsym(RTLD_NEXT, "putenv");
    FIT::Original.setenv_ = (int (*)(const char * name, const char * value, int overwrite)) dlsym(RTLD_NEXT, "setenv");
    FIT::Original.unsetenv_ = (int (*)(const char * name)) dlsym(RTLD_NEXT, "unsetenv");
    FIT::Original.open_ = (int (*)(const char *pathname, int flags, ...)) dlsym(RTLD_NEXT, "open");
    FIT::Original.open64_ = (int (*)(const char *pathname, int flags, ...)) dlsym(RTLD_NEXT, "open64");
    FIT::Original.socket_ = (int (*)(int domain, int type, int protocol)) dlsym(RTLD_NEXT, "socket");
    FIT::Original.accept_ = (int (*)(int sockfd, struct sockaddr * addr, socklen_t * addrlen)) dlsym(RTLD_NEXT, "accept");
    FIT::Original.pipe_ = (int (*)(int * pipefd)) dlsym(RTLD_NEXT, "pipe");
    FIT::Original.pipe2_ = (int (*)(int * pipefd, int flags)) dlsym(RTLD_NEXT, "pipe2");
    FIT::Original.__fgets_chk_ = (char * (*)(char * s, size_t size, int strsize, FILE * stream)) dlsym(RTLD_NEXT, "__fgets_chk");
    FIT::Original.__fgets_unlocked_chk_ = (char * (*)(char * s, size_t size, int strsize, FILE * stream)) dlsym(RTLD_NEXT, "__fgets_unlocked_chk");
    FIT::Original.__fgetws_chk_ = (wchar_t * (*)(wchar_t * ws, size_t size, int strsize, FILE * stream)) dlsym(RTLD_NEXT, "__fgetws_chk");
    FIT::Original.__fgetws_unlocked_chk_ = (wchar_t * (*)(wchar_t * ws, size_t strsize, int n, FILE * stream)) dlsym(RTLD_NEXT, "__fgetws_unlocked_chk");
    FIT::Original.__pread64_chk_ = (ssize_t (*)(int fd, void * ptr, size_t nb, off64_t offset, size_t buflen)) dlsym(RTLD_NEXT, "__pread64_chk");
    FIT::Original.__pread_chk_ = (ssize_t (*)(int fd, void * ptr, size_t nb, off_t offset, size_t buflen)) dlsym(RTLD_NEXT, "__pread_chk");
    FIT::Original.__read_chk_ = (ssize_t (*)(int fd, void * ptr, size_t nb, size_t buflen)) dlsym(RTLD_NEXT, "__read_chk");
    FIT::Original.openat_ = (int (*)(int dirfd, const char *pathname, int flags, ...)) dlsym(RTLD_NEXT, "openat");
    FIT::Original.openat64_ = (int (*)(int dirfd, const char *pathname, int flags, ...)) dlsym(RTLD_NEXT, "openat64");
    FIT::Original.renameat_ = (int (*)(int olddirfd, const char * oldpath, int newdirfd, const char * newpath)) dlsym(RTLD_NEXT, "renameat");
    FIT::Original.mkfifoat_ = (int (*)(int dirfd, const char * pathname, mode_t mode)) dlsym(RTLD_NEXT, "mkfifoat");
    FIT::Original.symlinkat_ = (int (*)(const char * oldpath, int newdirfd, const char * newpath)) dlsym(RTLD_NEXT, "symlinkat");
    FIT::Original.mkdirat_ = (int (*)(int dirfd, const char * pathname, mode_t mode)) dlsym(RTLD_NEXT, "mkdirat");
    FIT::Original.unlinkat_ = (int (*)(int dirfd, const char * pathname, int flags)) dlsym(RTLD_NEXT, "unlinkat");
    FIT::Original.fchmodat_ = (int (*)(int dirfd, const char * pathname, mode_t mode, int flags)) dlsym(RTLD_NEXT, "fchmodat");
    FIT::Original.fchownat_ = (int (*)(int dirfd, const char * pathname, uid_t owner, gid_t group, int flags)) dlsym(RTLD_NEXT, "fchownat");
    FIT::Original.linkat_ = (int (*)(int olddirfd, const char * oldpath, int newdirfd, const char * newpath, int flags)) dlsym(RTLD_NEXT, "linkat");
    

    bool value =(FIT::Original.vfprintf_ != NULL) &&
    (FIT::Original.vdprintf_ != NULL) &&
    (FIT::Original.fgetc_unlocked_ != NULL) &&
    (FIT::Original.fputc_unlocked_ != NULL) &&
    (FIT::Original.__vfprintf_chk_ != NULL) &&
    (FIT::Original.close_ != NULL) &&
    (FIT::Original.creat_ != NULL) &&
    (FIT::Original.creat64_ != NULL) &&
    (FIT::Original.fclose_ != NULL) &&
    (FIT::Original.fcloseall_ != NULL) &&
    (FIT::Original.fgetc_ != NULL) &&
    (FIT::Original.fgets_ != NULL) &&
    (FIT::Original.fopen_ != NULL) &&
    (FIT::Original.fopen64_ != NULL) &&
    (FIT::Original.fputc_ != NULL) &&
    (FIT::Original.fputs_ != NULL) &&
    (FIT::Original.fread_ != NULL) &&
    (FIT::Original.freopen_ != NULL) &&
    (FIT::Original.freopen64_ != NULL) &&
    (FIT::Original.fwrite_ != NULL) &&
    (FIT::Original.getline_ != NULL) &&
    (FIT::Original.pread_ != NULL) &&
    (FIT::Original.pwrite_ != NULL) &&
    (FIT::Original.read_ != NULL) &&
    (FIT::Original.vfscanf_ != NULL) &&
    (FIT::Original.write_ != NULL) &&
    (FIT::Original.fread_unlocked_ != NULL) &&
    (FIT::Original.fwrite_unlocked_ != NULL) &&
    (FIT::Original.fgets_unlocked_ != NULL) &&
    (FIT::Original.fputs_unlocked_ != NULL) &&
    (FIT::Original.fseek_ != NULL) &&
    (FIT::Original.fseeko_ != NULL) &&
    (FIT::Original.fsetpos_ != NULL) &&
    (FIT::Original.fsetpos64_ != NULL) &&
    (FIT::Original.lseek_ != NULL) &&
    (FIT::Original.lseek64_ != NULL) &&
    (FIT::Original.chmod_ != NULL) &&
    (FIT::Original.chown_ != NULL) &&
    (FIT::Original.fchmod_ != NULL) &&
    (FIT::Original.fchown_ != NULL) &&
    (FIT::Original.lchown_ != NULL) &&
    (FIT::Original.dup_ != NULL) &&
    (FIT::Original.dup2_ != NULL) &&
    (FIT::Original.dup3_ != NULL) &&
    (FIT::Original.ftruncate_ != NULL) &&
    (FIT::Original.ftruncate64_ != NULL) &&
    (FIT::Original.link_ != NULL) &&
    (FIT::Original.mkdir_ != NULL) &&
    (FIT::Original.mkfifo_ != NULL) &&
    (FIT::Original.__xmknod_ != NULL) &&
    (FIT::Original.remove_ != NULL) &&
    (FIT::Original.rename_ != NULL) &&
    (FIT::Original.rmdir_ != NULL) &&
    (FIT::Original.symlink_ != NULL) &&
    (FIT::Original.truncate_ != NULL) &&
    (FIT::Original.truncate64_ != NULL) &&
    (FIT::Original.unlink_ != NULL) &&
    (FIT::Original.popen_ != NULL) &&
    (FIT::Original.pclose_ != NULL) &&
    (FIT::Original.mkstemp_ != NULL) &&
    (FIT::Original.mkostemp_ != NULL) &&
    (FIT::Original.mkstemps_ != NULL) &&
    (FIT::Original.mkostemps_ != NULL) &&
    (FIT::Original.tmpfile_ != NULL) &&
    (FIT::Original.tmpfile64_ != NULL) &&
    (FIT::Original.__fxstat_ != NULL) &&
    (FIT::Original.__fxstat64_ != NULL) &&
    (FIT::Original.__lxstat_ != NULL) &&
    (FIT::Original.__lxstat64_ != NULL) &&
    (FIT::Original.__xstat_ != NULL) &&
    (FIT::Original.__xstat64_ != NULL) &&
    (FIT::Original.chdir_ != NULL) &&
    (FIT::Original.fchdir_ != NULL) &&
    (FIT::Original.killpg_ != NULL) &&
    (FIT::Original.seteuid_ != NULL) &&
    (FIT::Original.setegid_ != NULL) &&
    (FIT::Original.setgid_ != NULL) &&
    (FIT::Original.setreuid_ != NULL) &&
    (FIT::Original.setregid_ != NULL) &&
    (FIT::Original.setuid_ != NULL) &&
    (FIT::Original.clearenv_ != NULL) &&
    (FIT::Original.putenv_ != NULL) &&
    (FIT::Original.setenv_ != NULL) &&
    (FIT::Original.unsetenv_ != NULL) &&
    (FIT::Original.open_ != NULL) &&
    (FIT::Original.open64_ != NULL) &&
    (FIT::Original.socket_ != NULL) &&
    (FIT::Original.accept_ != NULL) &&
    (FIT::Original.pipe_ != NULL) &&
    (FIT::Original.pipe2_ != NULL) &&
    (FIT::Original.__fgets_chk_ != NULL) &&
    (FIT::Original.__fgets_unlocked_chk_ != NULL) &&
    (FIT::Original.__fgetws_chk_ != NULL) &&
    (FIT::Original.__fgetws_unlocked_chk_ != NULL) &&
    (FIT::Original.__pread64_chk_ != NULL) &&
    (FIT::Original.__pread_chk_ != NULL) &&
    (FIT::Original.__read_chk_ != NULL) &&
    (FIT::Original.openat_ != NULL) &&
    (FIT::Original.openat64_ != NULL) &&
    (FIT::Original.renameat_ != NULL) &&
    (FIT::Original.mkfifoat_ != NULL) &&
    (FIT::Original.symlinkat_ != NULL) &&
    (FIT::Original.mkdirat_ != NULL) &&
    (FIT::Original.unlinkat_ != NULL) &&
    (FIT::Original.fchmodat_ != NULL) &&
    (FIT::Original.fchownat_ != NULL) &&
    (FIT::Original.linkat_ != NULL) ;
    

    return value;
}

static std::mutex init_start_mux;

void __FIT__injectionInit(){
    init_start_mux.lock();
    if (!FIT::initialised_flag){
        //FIT::Original.fputs_("Initialising Start\n\0", stdout);

        FIT::initialised_flag = true;
        //Prevent reentry into init functions

        FIT::insideFIT = true;

        bool funcs = mapFunctions();
        #ifdef __APPLE__
        FIT::Original.fputs_("Functions loaded; check not performed\n\0", stdout);
        #else
        if (!funcs) abort();
        #endif
        FIT::Original.fputs_("Functions found\n\0", stdout);
        const char* s = getenv(ENVREADTEST);
        if (s== NULL || strcmp(s, "TEST")!=0){
            abort(); //ENVironment cannot be acceses ->Control cannot be passed
        }


        s = getenv(CONTROL_FILE);
        if (s==NULL) abort();
        FILE* control = FIT::Original.fopen_(s, "r");
        if (control==NULL) abort();

        size_t nbytes = 100;
        char buffer[nbytes];
        char* line= buffer;
        ssize_t readbytes;

        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.injection_flag = (bool) (line[0]-'0');

        bool loggingFlag;
        bool inputLoggingFlag;
        bool shortLogFlag;

        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        loggingFlag = (bool) (line[0]-'0');
        inputLoggingFlag = true;
        shortLogFlag = false;

        FIT::Original.debugmode_flag = false;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.debugmode_flag = (bool) (line[0]-'0');

        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.recovery_flag = (bool) (line[0]-'0');

        FIT::Original.vfprintf_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.vfprintf_flag = (int) (line[0]-'0');
        FIT::Original.vdprintf_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.vdprintf_flag = (int) (line[0]-'0');
        FIT::Original.fgetc_unlocked_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.fgetc_unlocked_flag = (int) (line[0]-'0');
        FIT::Original.fputc_unlocked_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.fputc_unlocked_flag = (int) (line[0]-'0');
        FIT::Original.__vfprintf_chk_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.__vfprintf_chk_flag = (int) (line[0]-'0');
        FIT::Original.close_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.close_flag = (int) (line[0]-'0');
        FIT::Original.creat_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.creat_flag = (int) (line[0]-'0');
        FIT::Original.creat64_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.creat64_flag = (int) (line[0]-'0');
        FIT::Original.fclose_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.fclose_flag = (int) (line[0]-'0');
        FIT::Original.fcloseall_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.fcloseall_flag = (int) (line[0]-'0');
        FIT::Original.fgetc_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.fgetc_flag = (int) (line[0]-'0');
        FIT::Original.fgets_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.fgets_flag = (int) (line[0]-'0');
        FIT::Original.fopen_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.fopen_flag = (int) (line[0]-'0');
        FIT::Original.fopen64_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.fopen64_flag = (int) (line[0]-'0');
        FIT::Original.fputc_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.fputc_flag = (int) (line[0]-'0');
        FIT::Original.fputs_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.fputs_flag = (int) (line[0]-'0');
        FIT::Original.fread_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.fread_flag = (int) (line[0]-'0');
        FIT::Original.freopen_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.freopen_flag = (int) (line[0]-'0');
        FIT::Original.freopen64_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.freopen64_flag = (int) (line[0]-'0');
        FIT::Original.fwrite_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.fwrite_flag = (int) (line[0]-'0');
        FIT::Original.getline_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.getline_flag = (int) (line[0]-'0');
        FIT::Original.pread_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.pread_flag = (int) (line[0]-'0');
        FIT::Original.pwrite_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.pwrite_flag = (int) (line[0]-'0');
        FIT::Original.read_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.read_flag = (int) (line[0]-'0');
        FIT::Original.vfscanf_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.vfscanf_flag = (int) (line[0]-'0');
        FIT::Original.write_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.write_flag = (int) (line[0]-'0');
        FIT::Original.fread_unlocked_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.fread_unlocked_flag = (int) (line[0]-'0');
        FIT::Original.fwrite_unlocked_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.fwrite_unlocked_flag = (int) (line[0]-'0');
        FIT::Original.fgets_unlocked_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.fgets_unlocked_flag = (int) (line[0]-'0');
        FIT::Original.fputs_unlocked_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.fputs_unlocked_flag = (int) (line[0]-'0');
        FIT::Original.fseek_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.fseek_flag = (int) (line[0]-'0');
        FIT::Original.fseeko_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.fseeko_flag = (int) (line[0]-'0');
        FIT::Original.fsetpos_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.fsetpos_flag = (int) (line[0]-'0');
        FIT::Original.fsetpos64_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.fsetpos64_flag = (int) (line[0]-'0');
        FIT::Original.lseek_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.lseek_flag = (int) (line[0]-'0');
        FIT::Original.lseek64_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.lseek64_flag = (int) (line[0]-'0');
        FIT::Original.chmod_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.chmod_flag = (int) (line[0]-'0');
        FIT::Original.chown_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.chown_flag = (int) (line[0]-'0');
        FIT::Original.fchmod_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.fchmod_flag = (int) (line[0]-'0');
        FIT::Original.fchown_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.fchown_flag = (int) (line[0]-'0');
        FIT::Original.lchown_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.lchown_flag = (int) (line[0]-'0');
        FIT::Original.dup_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.dup_flag = (int) (line[0]-'0');
        FIT::Original.dup2_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.dup2_flag = (int) (line[0]-'0');
        FIT::Original.dup3_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.dup3_flag = (int) (line[0]-'0');
        FIT::Original.ftruncate_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.ftruncate_flag = (int) (line[0]-'0');
        FIT::Original.ftruncate64_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.ftruncate64_flag = (int) (line[0]-'0');
        FIT::Original.link_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.link_flag = (int) (line[0]-'0');
        FIT::Original.mkdir_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.mkdir_flag = (int) (line[0]-'0');
        FIT::Original.mkfifo_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.mkfifo_flag = (int) (line[0]-'0');
        FIT::Original.__xmknod_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.__xmknod_flag = (int) (line[0]-'0');
        FIT::Original.remove_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.remove_flag = (int) (line[0]-'0');
        FIT::Original.rename_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.rename_flag = (int) (line[0]-'0');
        FIT::Original.rmdir_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.rmdir_flag = (int) (line[0]-'0');
        FIT::Original.symlink_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.symlink_flag = (int) (line[0]-'0');
        FIT::Original.truncate_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.truncate_flag = (int) (line[0]-'0');
        FIT::Original.truncate64_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.truncate64_flag = (int) (line[0]-'0');
        FIT::Original.unlink_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.unlink_flag = (int) (line[0]-'0');
        FIT::Original.popen_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.popen_flag = (int) (line[0]-'0');
        FIT::Original.pclose_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.pclose_flag = (int) (line[0]-'0');
        FIT::Original.mkstemp_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.mkstemp_flag = (int) (line[0]-'0');
        FIT::Original.mkostemp_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.mkostemp_flag = (int) (line[0]-'0');
        FIT::Original.mkstemps_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.mkstemps_flag = (int) (line[0]-'0');
        FIT::Original.mkostemps_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.mkostemps_flag = (int) (line[0]-'0');
        FIT::Original.tmpfile_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.tmpfile_flag = (int) (line[0]-'0');
        FIT::Original.tmpfile64_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.tmpfile64_flag = (int) (line[0]-'0');
        FIT::Original.__fxstat_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.__fxstat_flag = (int) (line[0]-'0');
        FIT::Original.__fxstat64_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.__fxstat64_flag = (int) (line[0]-'0');
        FIT::Original.__lxstat_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.__lxstat_flag = (int) (line[0]-'0');
        FIT::Original.__lxstat64_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.__lxstat64_flag = (int) (line[0]-'0');
        FIT::Original.__xstat_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.__xstat_flag = (int) (line[0]-'0');
        FIT::Original.__xstat64_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.__xstat64_flag = (int) (line[0]-'0');
        FIT::Original.chdir_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.chdir_flag = (int) (line[0]-'0');
        FIT::Original.fchdir_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.fchdir_flag = (int) (line[0]-'0');
        FIT::Original.killpg_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.killpg_flag = (int) (line[0]-'0');
        FIT::Original.seteuid_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.seteuid_flag = (int) (line[0]-'0');
        FIT::Original.setegid_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.setegid_flag = (int) (line[0]-'0');
        FIT::Original.setgid_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.setgid_flag = (int) (line[0]-'0');
        FIT::Original.setreuid_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.setreuid_flag = (int) (line[0]-'0');
        FIT::Original.setregid_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.setregid_flag = (int) (line[0]-'0');
        FIT::Original.setuid_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.setuid_flag = (int) (line[0]-'0');
        FIT::Original.clearenv_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.clearenv_flag = (int) (line[0]-'0');
        FIT::Original.putenv_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.putenv_flag = (int) (line[0]-'0');
        FIT::Original.setenv_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.setenv_flag = (int) (line[0]-'0');
        FIT::Original.unsetenv_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.unsetenv_flag = (int) (line[0]-'0');
        FIT::Original.open_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.open_flag = (int) (line[0]-'0');
        FIT::Original.open64_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.open64_flag = (int) (line[0]-'0');
        FIT::Original.socket_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.socket_flag = (int) (line[0]-'0');
        FIT::Original.accept_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.accept_flag = (int) (line[0]-'0');
        FIT::Original.pipe_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.pipe_flag = (int) (line[0]-'0');
        FIT::Original.pipe2_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.pipe2_flag = (int) (line[0]-'0');
        FIT::Original.__fgets_chk_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.__fgets_chk_flag = (int) (line[0]-'0');
        FIT::Original.__fgets_unlocked_chk_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.__fgets_unlocked_chk_flag = (int) (line[0]-'0');
        FIT::Original.__fgetws_chk_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.__fgetws_chk_flag = (int) (line[0]-'0');
        FIT::Original.__fgetws_unlocked_chk_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.__fgetws_unlocked_chk_flag = (int) (line[0]-'0');
        FIT::Original.__pread64_chk_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.__pread64_chk_flag = (int) (line[0]-'0');
        FIT::Original.__pread_chk_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.__pread_chk_flag = (int) (line[0]-'0');
        FIT::Original.__read_chk_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.__read_chk_flag = (int) (line[0]-'0');
        FIT::Original.openat_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.openat_flag = (int) (line[0]-'0');
        FIT::Original.openat64_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.openat64_flag = (int) (line[0]-'0');
        FIT::Original.renameat_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.renameat_flag = (int) (line[0]-'0');
        FIT::Original.mkfifoat_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.mkfifoat_flag = (int) (line[0]-'0');
        FIT::Original.symlinkat_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.symlinkat_flag = (int) (line[0]-'0');
        FIT::Original.mkdirat_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.mkdirat_flag = (int) (line[0]-'0');
        FIT::Original.unlinkat_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.unlinkat_flag = (int) (line[0]-'0');
        FIT::Original.fchmodat_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.fchmodat_flag = (int) (line[0]-'0');
        FIT::Original.fchownat_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.fchownat_flag = (int) (line[0]-'0');
        FIT::Original.linkat_count = 0;
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        FIT::Original.linkat_flag = (int) (line[0]-'0');
        


        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        line[readbytes-1] = '\0';
        char pFileName[readbytes];
        strcpy(pFileName, line);
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        line[readbytes-1] = '\0';
        char mFileName[readbytes];
        strcpy(mFileName, line);
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        line[readbytes-1] = '\0';
        char oFileName[readbytes];
        strcpy(oFileName, line);
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        line[readbytes-1] = '\0';
        char eFileName[readbytes];
        strcpy(eFileName, line);
        readbytes = FIT::Original.getline_(&line, &nbytes, control);
        if (readbytes <= 0)
            abort();
        line[readbytes-1] = '\0';
        char iFileName[readbytes];
        strcpy(iFileName, line);

        FIT::Original.fclose_(control);

        //TRY to create a logfile
        FIT::Original.logFile = (FIT::Logfile*) malloc(sizeof(FIT::Logfile));
        if (FIT::Original.logFile!=NULL){
            FIT::Original.logFile = new(FIT::Original.logFile) FIT::Logfile(shortLogFlag,loggingFlag, inputLoggingFlag, oFileName, mFileName, eFileName, iFileName, pFileName);
        } else {
            abort(); //Logging impossible ->Cannot track execution
        }
        FIT::insideFIT = false;
        FIT::initialised_flag=true;
        //FIT::Original.fputs_("Initialising Fin\n\0", stdout);
    }
    init_start_mux.unlock();
}

void __FIT__injectionFin(){
    if (FIT::initialised_flag){
        FIT::Original.logFile->~Logfile();
        free(FIT::Original.logFile);
    }
}